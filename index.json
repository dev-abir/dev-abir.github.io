[{"content":"Banga Sahitya Kutir I actively participated in building up the whole backend and tech infrastructure at Banga Sahitya Kutir . It is a book publishing business, by my friend. I should never take up all the credits to myself. Multiple people like Rupak Biswas (Frontend Developer) , Malay Khamroi , writers and of-course the business owner Samitendra Bhattacharjee took part in this venture.\nWe started with Next.js and Strapi , then eventually moved on to Django and HTMX stack for various reasons (read this ).\nSome key features I worked on:\nCustom controllers, security and permission checks in a headless cms - strapi. Image optimization, searching, sorting and debounce in Next.js. Used Django and HTMX (https://htmx.org/ ) with reactivity in multiple pages. SEO, backups, cron jobs, Image optimization, PWA, OAUTH, E-Mail, captcha, payment and shipping integration, order tracking, cancellation and invoice generation. Deployed on AWS EC2, S3 and Cloudfront for CDN. Go buy some books! Banga Sahitya Kutir Facebook Internship at JMD web studio Worked in Node.js, Socket.io, React.js, Java. Built chat system, user report and admin dashboard. Also, deployed them on AWS. We have deployed multiple apps in playstore. Some of them has web version as well. I was a backend software engineer intern there. This is an app I actively worked on. Freelancing (Truelancer) Worked on couple of projects in Django, react native. Mainly adding features and fixing bugs. [proifile link] NASA Spaceapps 2021 Hackathon We developed LuCon, a software to communicate with the astronauts on the moon and the base station. [project link] ","permalink":"https://dev-abir.github.io/experience/","summary":"Banga Sahitya Kutir I actively participated in building up the whole backend and tech infrastructure at Banga Sahitya Kutir . It is a book publishing business, by my friend. I should never take up all the credits to myself. Multiple people like Rupak Biswas (Frontend Developer) , Malay Khamroi , writers and of-course the business owner Samitendra Bhattacharjee took part in this venture.\nWe started with Next.js and Strapi , then eventually moved on to Django and HTMX stack for various reasons (read this ).","title":"Experience"},{"content":"🔗 dev.to link Why? This is yet-another-spring-boot-jwt-tutorial. It has 2 main motives:\nTo understand and document my understanding about spring security. The existing articles mostly use jjwt which has a vulnerable release (as of now). Thus, I decided to use an alternative library, along with springdoc openapi 3 swagger docs. Probably you could scavenge the internet, and use LLMs to put up such an implementation. I just created a cookbook kind of, you may use it as a guide.\nLet\u0026rsquo;s start\u0026hellip;\nHow? This is not at all a beginner\u0026rsquo;s guide, and I would assume the reader knows the basics of spring, IOC container, gradle, spring data JPA, how to build basic CRUD in spring boot.\nAs a starting point, you may follow this guide .\nInitialize This is a simple CRUD application with just 3 routes: /register, /login and /profile (protected route). I hope this is pretty much self-explanatory. We will be using the H2 database , which is an in-memory database. It is easy to deal with during development, but not ideal for production. There\u0026rsquo;s also an inbuilt web UI for H2 database.\nGo to Spring boot initializr .\nYou will need the following dependencies:\ndependencies { implementation \u0026#39;org.springframework.boot:spring-boot-starter-data-jpa\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-security\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-validation\u0026#39; implementation \u0026#39;org.springframework.boot:spring-boot-starter-web\u0026#39; implementation \u0026#39;com.auth0:java-jwt:4.4.0\u0026#39; implementation \u0026#39;org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0\u0026#39; compileOnly \u0026#39;org.projectlombok:lombok\u0026#39; runtimeOnly \u0026#39;com.h2database:h2\u0026#39; annotationProcessor \u0026#39;org.projectlombok:lombok\u0026#39; testImplementation \u0026#39;org.springframework.boot:spring-boot-starter-test\u0026#39; testImplementation \u0026#39;org.springframework.security:spring-security-test\u0026#39; testRuntimeOnly \u0026#39;org.junit.platform:junit-platform-launcher\u0026#39; } The above alien language is groovy, which is used to configure Gradle build system (similar to xml in maven). The dependencies block is straightforward and pretty self-explanatory (one of the reasons why I prefer Gradle).\nNow, extract and import the gradle/maven project into your preferred editor. If any error occurs, make sure about spring and Java version.\nTwo dependencies (com.auth0:java-jwt and org.springdoc:springdoc-openapi-starter-webmvc-ui) aren\u0026rsquo;t available in spring starter. Get them from here and here .\nModel We will first create our model, then controller, then service, in the meantime, we will also learn about the required things as we go along\u0026hellip;\nCreate a package called controller.\nCreate UserDao.java:\npackage org.devabir.jwtexample.model; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.Id; import jakarta.persistence.Table; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import org.hibernate.annotations.CreationTimestamp; import org.hibernate.annotations.UpdateTimestamp; import java.util.Date; @Entity @Table(name = \u0026#34;user_\u0026#34;) @Data @AllArgsConstructor @NoArgsConstructor public class UserDao { @Id private String email; @Column(nullable = false, name = \u0026#34;hashed_password\u0026#34;) private String hashedPassword; @CreationTimestamp @Column(name = \u0026#34;created_at\u0026#34;, updatable = false, nullable = false) private final Date createdAt = new Date(); @UpdateTimestamp @Column(name = \u0026#34;updated_at\u0026#34;) private Date updatedAt; } This is for interacting with the database. Most db has user as reserved keyword, hence, we are calling it user_.\nGetters, setters, and constructors are all auto-generated by the annotations from lombok. If you are new to this, you should spend some time and setup lombok in your ide .\nCreate UserRequestDto.java:\npackage org.devabir.jwtexample.model; import jakarta.validation.constraints.Email; import jakarta.validation.constraints.NotBlank; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class UserRequestDto { @NotBlank(message = \u0026#34;Email is mandatory.\u0026#34;) // This email regex works. Trust me :) @Email(message = \u0026#34;Please enter a valid email.\u0026#34;, regexp = \u0026#34;^[a-zA-Z0-9_!#$%\u0026amp;’*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$\u0026#34;) private String email; @NotBlank(message = \u0026#34;Password is mandatory.\u0026#34;) private String password; } It also has validation logic. The email regex is sourced from some online searches, and it will work every time (trust me :)).\nCreate UserResponseDto.java:\npackage org.devabir.jwtexample.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.util.Date; @Data @AllArgsConstructor @NoArgsConstructor public class UserResponseDto { private String email; private Date createdAt; private Date updatedAt; } Separate Response object, so that we don\u0026rsquo;t accidentally leak out confidential attributes like password, also it includes generated fields like created and updated timestamp.\nCreate TokenResponse.java:\npackage org.devabir.jwtexample.model; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class TokenResponse { private String accessToken; private UserResponseDto user; } This class will be specifically used to respond on a /login request. We will not only send the user info, but also the JWT access token. In later sections, we will see how to set up the JWT part.\nThis is all about the models, now let\u0026rsquo;s set up the repository for interacting with the database.\nJPA Repository Create a package called repository, then inside that create UserRepository.java:\npackage org.devabir.jwtexample.repository; import org.devabir.jwtexample.model.UserDao; import org.springframework.data.jpa.repository.JpaRepository; public interface UserRepository extends JpaRepository\u0026lt;UserDao, String\u0026gt; { } Controller We have only one controller. Create a package controller, inside that a file AuthController.java:\npackage org.devabir.jwtexample.controller; import io.swagger.v3.oas.annotations.Operation; import io.swagger.v3.oas.annotations.security.SecurityRequirement; import jakarta.validation.Valid; import org.devabir.jwtexample.model.TokenResponse; import org.devabir.jwtexample.model.UserRequestDto; import org.devabir.jwtexample.model.UserResponseDto; import org.devabir.jwtexample.service.AuthService; import org.devabir.jwtexample.service.JwtService; import org.springframework.http.HttpStatus; import org.springframework.http.ResponseEntity; import org.springframework.security.core.Authentication; import org.springframework.security.core.context.SecurityContextHolder; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.web.bind.annotation.*; @RestController @RequestMapping(\u0026#34;/auth\u0026#34;) public class AuthController { private final AuthService authService; private final JwtService jwtService; public AuthController(AuthService authService, JwtService jwtService) { this.authService = authService; this.jwtService = jwtService; } @PostMapping(\u0026#34;/register\u0026#34;) public ResponseEntity\u0026lt;UserResponseDto\u0026gt; register(@Valid @RequestBody UserRequestDto userRequestDto) { return ResponseEntity .status(HttpStatus.CREATED) .body(this.authService.register(userRequestDto)); } @PostMapping(\u0026#34;/login\u0026#34;) public ResponseEntity\u0026lt;TokenResponse\u0026gt; login(@Valid @RequestBody UserRequestDto userRequestDto) { UserResponseDto user = authService.login(userRequestDto); final String accessToken = jwtService.buildToken(user.getEmail()); return ResponseEntity.ok(new TokenResponse(accessToken, user)); } @Operation(security = {@SecurityRequirement(name = \u0026#34;bearer-key\u0026#34;)}) @GetMapping(\u0026#34;/profile\u0026#34;) public ResponseEntity\u0026lt;UserResponseDto\u0026gt; profile() { Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); UserDetails userDetails = (UserDetails) authentication.getPrincipal(); final String email = userDetails.getUsername(); return ResponseEntity.ok(this.authService.profile(email)); } } This controller has 2 dependencies, AuthService and JwtService. We will eventually implement them. This controller will give us a high-level overview of the API we are going to create. @Valid annotation will validate the Bean with the constraints like @NotBlank, defined earlier, and throw an appropriate error. Spring\u0026rsquo;s default exception handler ProblemDetailsExceptionHandler , will respond with an appropriate JSON. @Operation(security = {@SecurityRequirement(name = \u0026quot;bearer-key\u0026quot;)}) annotation is specific to springdoc, we will come to it at last. Just remember that it helps us to identify which routes require authentication in the generated docs. In English, this roughly translates to: \u0026ldquo;If the user is authenticated, Spring should already have the authenticated user\u0026rsquo;s data, which we are simply accessing.\u0026rdquo;: Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); UserDetails userDetails = (UserDetails) authentication.getPrincipal(); final String email = userDetails.getUsername(); Keep this part in mind, we will again use these when setting up security configs. Service Create a package called service.\nCreate UserService.java:\npackage org.devabir.jwtexample.service; import org.devabir.jwtexample.model.UserDao; import org.devabir.jwtexample.model.UserResponseDto; import org.springframework.beans.BeanUtils; import org.springframework.stereotype.Service; @Service public class UserService { public UserResponseDto toDto(UserDao userDao) { UserResponseDto result = new UserResponseDto(); BeanUtils.copyProperties(userDao, result, \u0026#34;hashedPassword\u0026#34;); return result; } } This file only converts the DAO to DTO, thus adhering to separation-of-concerns. DTO and DAO have many common fields, thus we are copying the Bean properties. There are other methods like model-mapper, builder or constructor from lombok. This seemed short and simple enough. public static void copyProperties( Object source, Object target, String... ignoreProperties) throws BeansException {} This will work, even if you just omit the last parameter, I just included that to be explicit. Create JwtService.java:\npackage org.devabir.jwtexample.service; import com.auth0.jwt.JWT; import com.auth0.jwt.algorithms.Algorithm; import com.auth0.jwt.exceptions.JWTVerificationException; import com.auth0.jwt.interfaces.DecodedJWT; import com.auth0.jwt.interfaces.JWTVerifier; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Service; import java.util.Date; @Service public class JwtService { private final long jwtExpiration; private final Algorithm signingAlgorithm; public JwtService( @Value(\u0026#34;${security.jwt.secret-key}\u0026#34;) String secretKey, @Value(\u0026#34;${security.jwt.expiration-time}\u0026#34;) long jwtExpiration ) { this.jwtExpiration = jwtExpiration; this.signingAlgorithm = Algorithm.HMAC256(secretKey); } public String extractEmail(String token) { JWTVerifier jwtVerifier = JWT.require(signingAlgorithm).build(); DecodedJWT jwt = jwtVerifier.verify(token); return jwt.getSubject(); } public boolean isTokenValid(String token, String email) { try { JWTVerifier verifier = JWT.require(signingAlgorithm) .withSubject(email) .build(); verifier.verify(token); } catch (JWTVerificationException exception) { return false; } return true; } public String buildToken(String email) { return JWT.create() .withSubject(email) .withIssuedAt(new Date()) .withExpiresAt(new Date(System.currentTimeMillis() + jwtExpiration)) .sign(signingAlgorithm); } } This code actually uses the Auth0\u0026rsquo;s JWT library . @Value(\u0026quot;${security.jwt.secret-key}\u0026quot;) imports values from the application.properties file. This is mostly self-explanatory, we are setting user\u0026rsquo;s email as the subject and signing algorithm as HMAC256. One thing to keep in mind, jwtVerifier.verify(token); could throw verification error. At last AuthService.java:\npackage org.devabir.jwtexample.service; import org.devabir.jwtexample.model.UserDao; import org.devabir.jwtexample.model.UserRequestDto; import org.devabir.jwtexample.model.UserResponseDto; import org.devabir.jwtexample.repository.UserRepository; import org.springframework.beans.BeanUtils; import org.springframework.http.HttpStatus; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.UsernamePasswordAuthenticationToken; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.password.PasswordEncoder; import org.springframework.stereotype.Service; import org.springframework.web.server.ResponseStatusException; @Service public class AuthService { private final UserService userService; private final UserRepository userRepository; private final PasswordEncoder passwordEncoder; private final AuthenticationManager authenticationManager; public AuthService(UserService userService, UserRepository userRepository, PasswordEncoder passwordEncoder, AuthenticationManager authenticationManager) { this.userService = userService; this.userRepository = userRepository; this.passwordEncoder = passwordEncoder; this.authenticationManager = authenticationManager; } public UserResponseDto register(UserRequestDto userRequestDto) { final String email = userRequestDto.getEmail(); if (this.userRepository.findById(email).isPresent()) throw new ResponseStatusException(HttpStatus.CONFLICT, \u0026#34;Email \u0026#34; + email + \u0026#34; is already taken.\u0026#34;); UserDao userDao = new UserDao(); BeanUtils.copyProperties(userRequestDto, userDao, \u0026#34;password\u0026#34;); userDao.setHashedPassword(this.passwordEncoder.encode(userRequestDto.getPassword())); userDao = this.userRepository.save(userDao); return this.userService.toDto(userDao); } public UserResponseDto login(UserRequestDto userRequestDto) { final String email = userRequestDto.getEmail(); UserDao userDao = userRepository. findById(email) .orElseThrow( () -\u0026gt; new UsernameNotFoundException(\u0026#34;User \u0026#34; + email + \u0026#34; not found.\u0026#34;) ); this.authenticationManager.authenticate( new UsernamePasswordAuthenticationToken( userRequestDto.getEmail(), userRequestDto.getPassword() ) ); return userService.toDto(userDao); } public UserResponseDto profile(String email) { UserDao userDao = userRepository .findById(email) .orElseThrow(() -\u0026gt; new UsernameNotFoundException(\u0026#34;User \u0026#34; + email + \u0026#34; not found.\u0026#34;)); return userService.toDto(userDao); } } We need to define 2 beans (PasswordEncoder and AuthenticationManager). We will define them in upcoming sections. this.authenticationManager.authenticate( new UsernamePasswordAuthenticationToken( userRequestDto.getEmail(), userRequestDto.getPassword() ) ); This will authenticate and save the user data into Spring\u0026rsquo;s context. Config Create a package called config.\nCreate AppConfig.java:\npackage org.devabir.jwtexample.config; import io.swagger.v3.oas.models.Components; import io.swagger.v3.oas.models.OpenAPI; import io.swagger.v3.oas.models.security.SecurityScheme; import org.devabir.jwtexample.model.UserDao; import org.devabir.jwtexample.repository.UserRepository; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationManager; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.authentication.dao.DaoAuthenticationProvider; import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration; import org.springframework.security.core.GrantedAuthority; import org.springframework.security.core.userdetails.UserDetails; import org.springframework.security.core.userdetails.UserDetailsService; import org.springframework.security.core.userdetails.UsernameNotFoundException; import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder; import java.util.Collection; import java.util.List; import java.util.Optional; @Configuration public class AppConfig { private final UserRepository userRepository; public AppConfig(UserRepository userRepository) { this.userRepository = userRepository; } @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception { return authConfig.getAuthenticationManager(); } @Bean BCryptPasswordEncoder passwordEncoder() { return new BCryptPasswordEncoder(); } @Bean public AuthenticationProvider authenticationProvider() { DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider(); authProvider.setUserDetailsService(userDetailsService()); authProvider.setPasswordEncoder(passwordEncoder()); return authProvider; } @Bean UserDetailsService userDetailsService() { return new UserDetailsService() { @Override public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException { // NOTE: no username, we just use emails internally. final String email = username; Optional\u0026lt;UserDao\u0026gt; optionalUserDao = userRepository.findById(email); if (optionalUserDao.isEmpty()) { throw new UsernameNotFoundException(\u0026#34;User \u0026#34; + email + \u0026#34; not found.\u0026#34;); } UserDao user = optionalUserDao.get(); return new UserDetails() { @Override public Collection\u0026lt;? extends GrantedAuthority\u0026gt; getAuthorities() { return List.of(); } @Override public String getPassword() { return user.getHashedPassword(); } @Override public String getUsername() { return user.getEmail(); } }; } }; } @Bean public OpenAPI customOpenAPI() { return new OpenAPI() .components( new Components() .addSecuritySchemes( \u0026#34;bearer-key\u0026#34;, new SecurityScheme() .type(SecurityScheme.Type.HTTP) .scheme(\u0026#34;bearer\u0026#34;) .bearerFormat(\u0026#34;JWT\u0026#34;) ) ); } } This is probably the most convoluted part of our current app. Here, our business logic interfaces with spring boot framework. We will go from top to bottom. The beans for AuthenticationManager and PasswordEncoder were required by the AuthService, we are defining it here. These will be injected into AuthService. Spring framework can work with many AuthenticationProvider, like: DaoAuthenticationProvider, LdapAuthenticationProvider. Also, we can implement complex rules like different authentication providers for different routes. We are defining a DaoAuthenticationProvider, which is very common (it uses a UserDetailsService to retrieve user details from the database and compare credentials). This UserDetailsService is very spring-specific way of defining users. We need to define loadUserByUsername(...) to retrieve the user from Database. We can also define some authorities for role-based access control purposes. Here username is just the user\u0026rsquo;s email. How we will define the UserDetails is up to us and spring will remember that, we can access that in a protected route. customOpenAPI() this is used to enhance the generated swagger docs, by adding authentication functionality. We will use this in demo later. Source . Create SecurityConfig.java:\npackage org.devabir.jwtexample.config; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.security.authentication.AuthenticationProvider; import org.springframework.security.config.annotation.web.builders.HttpSecurity; import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity; import org.springframework.security.config.http.SessionCreationPolicy; import org.springframework.security.web.SecurityFilterChain; import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter; import org.springframework.web.cors.CorsConfiguration; import org.springframework.web.cors.CorsConfigurationSource; import org.springframework.web.cors.UrlBasedCorsConfigurationSource; import java.util.List; @Configuration @EnableWebSecurity public class SecurityConfig { private final AuthenticationProvider authenticationProvider; private final JwtAuthFilter jwtAuthFilter; public SecurityConfig(AuthenticationProvider authenticationProvider, JwtAuthFilter jwtAuthFilter) { this.authenticationProvider = authenticationProvider; this.jwtAuthFilter = jwtAuthFilter; } @Bean public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity) throws Exception { httpSecurity.csrf(csrf -\u0026gt; csrf.disable()); httpSecurity.headers(h -\u0026gt; h.frameOptions(fo -\u0026gt; fo.disable())); httpSecurity.authorizeHttpRequests( authorizeHttpRequests -\u0026gt; authorizeHttpRequests .requestMatchers(\u0026#34;/auth/profile\u0026#34;) .authenticated() .anyRequest() .permitAll() ); httpSecurity.sessionManagement(sessionManagement -\u0026gt; sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS)); httpSecurity.authenticationProvider(authenticationProvider); httpSecurity.addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class); return httpSecurity.build(); } @Bean CorsConfigurationSource corsConfigurationSource() { CorsConfiguration corsConfiguration = new CorsConfiguration(); corsConfiguration.setAllowedOrigins(List.of(\u0026#34;http:localhost:8080\u0026#34;)); corsConfiguration.setAllowedMethods(List.of(\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;)); corsConfiguration.setAllowedHeaders(List.of(\u0026#34;Authorization\u0026#34;, \u0026#34;Content-Type\u0026#34;)); UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); source.registerCorsConfiguration(\u0026#34;/**\u0026#34;, corsConfiguration); return source; } } This uses our defined AuthenticationProvider. CorsConfigurationSource is for setting up CORS configuration. These are set up on the server side. Read this for getting an idea . Each request at first goes through a number of filters. This is called SecurityFilterChain. We are configuring that: Disable CSRF because it\u0026rsquo;s a REST API and we aren\u0026rsquo;t working with session cookies. Disable X-Frame-Options, mainly for h2-console web UI. This might not be a good idea in production. /auth/profile will be a protected route. The rest are public. No session cookie, thus SessionCreationPolicy.STATELESS. httpSecurity.addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class); we are adding the JWT filter (to extract email from JWT token), before Spring\u0026rsquo;s Auth filter. Properties Finally, this is the last file.\nCreate application.properties within resources folder:\nspring.application.name=jwtexample server.error.include-stacktrace=never server.error.include-exception=false server.error.include-message=always spring.datasource.url=jdbc:h2:mem:userdb spring.datasource.driverClassName=org.h2.Driver spring.h2.console.enabled=true spring.jpa.database-platform=org.hibernate.dialect.H2Dialect spring.jpa.hibernate.ddl-auto=create-drop security.jwt.secret-key=3e0ba6026587dc722876146dd83b2222 # 1h in millisecond security.jwt.expiration-time=3600000 spring.output.ansi.enabled=ALWAYS The security.jwt.secret-key needs to be of 32 chars (HMAC256 requires 256-bit key (32 * 8 = 256 bits)). The spring.output.ansi.enabled=ALWAYS always gives a colored output :). server.error properties are used to conceal some confidential info. while presenting user with an error response. This is still not full proof and may leak info in validation errors, or sql errors. We are using the H2 database , which is an in-memory database. It is easy to deal with during development, but not ideal for production. There\u0026rsquo;s also an inbuilt web UI for H2 database. Demo Run the application in your IDE, or in terminal run ./gradlew bootRun (gradle), ./mvnw spring-boot:run (maven). Go to: http://localhost:8080/swagger-ui.html Explore the h2 database at: http://localhost:8080/h2-console. Make sure to enter proper database name (userdb). Do register (expand and press on Try it out), then login and at last access the profile. Use padlock sign to copy and paste the JWT access token, you get after logging in. Also, check for the validation errors. Below are some screenshots: If you have any issue following, here\u0026rsquo;s the source code repo .\nThanks a lot for reading\nStay safe,\nHave a nice day.\n","permalink":"https://dev-abir.github.io/blogs/spring-boot-jwt-authentication-auth0-with-swagger-docs-springdoc/","summary":"🔗 dev.to link Why? This is yet-another-spring-boot-jwt-tutorial. It has 2 main motives:\nTo understand and document my understanding about spring security. The existing articles mostly use jjwt which has a vulnerable release (as of now). Thus, I decided to use an alternative library, along with springdoc openapi 3 swagger docs. Probably you could scavenge the internet, and use LLMs to put up such an implementation. I just created a cookbook kind of, you may use it as a guide.","title":"Spring boot JWT authentication (auth0) with Swagger docs (springdoc)"},{"content":"🔗 dev.to link I was approached by my friend to develop a E-commerce site for his book publishing business. I was mainly responsible for the back-end part. Requirements were basic:\nA good looking frontend. Multivender (multiple book Publishers / Sellers). Admin panel. Usual E-commerce stuff: Orders, payments, refunds, shipping, invoice generation etc. Initially we started off with next.js in the frontend, with postgresql , Typeorm and express.js in backend. We knew from day 1 that it might take a huge time to develop, especially the admin panel, so we were looking for alternatives. Strapi - an Open Source headless CMS was gaining some popularity back then. We gave it a try.\ntl;dr: Strapi is an amazing product, but we had some special requirements, which a general CMS couldn\u0026rsquo;t handle, it has some limitations. Thus, we had to change our techstack, but we learnt a lot in the process.\nWhat is Strapi and what is a headless CMS anyway? Lets compare it with wordpress, to have easier understanding:\nA headless CMS is a content management system (this part is somewhat similar to wordpress) that stores and manages content but doesn\u0026rsquo;t dictate how it\u0026rsquo;s presented on a website or app. It lets developers pull content through an API to display it however they want (that\u0026rsquo;s where it differs from traditional CMS like Wordpress), giving flexibility in design and platform.\n\u0026ldquo;head\u0026rdquo; = the front-end presentation layer.\n\u0026ldquo;body\u0026rdquo; = the back-end content management system.\nNow, \u0026ldquo;head-less\u0026rdquo; = back-end content management system without the presentation layer. We have to develop the presentation layer ourselves.\nStrapi is such a headless CMS. There are others in the market like: Contentful , Sanity , Picocms etc. We went with the Open Source and most popular one.\nWhat we appreciate It has many functionalities like an admin panel, multiple authentication and authorization methods and a lot more. I have listed a few in this article. It also has good plugins and providers like AWS S3, image optimizers, image uploaders, SEO, editors and it is increasing day-by-day. Best of all, it is open source, self-hosted and very customizable . We can customize the admin frontend (GUI) and the backend API as well. Content Types We can define multiple content types : Single types, Collection types and Components.\nSingle type can be like Footer, Header etc. Collection type are Posts, Authors, Orders etc. Then Components are mainly used for dynamic parts of a website like a banner with CTA and image, FAQ, Carousel. We can basically define a whole part of a webpage using components it is very powerful. What I learnt is that many sites actually use such CMS in the backend to handle dynamic parts of their site (discounts, banners, CTA), which is mostly set by editors, sales and marketing team.\nImage Optimization Images can be stored in multiple formats like large, medium, thumbnail etc, for faster loading time and all of this is handled by strapi itself using the file upload plugin.\nOn going to: http://localhost:1337/api/upload/files/1, we get:\n{ \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;query_builder.png\u0026#34;, \u0026#34;alternativeText\u0026#34;: \u0026#34;Query Builder Image\u0026#34;, \u0026#34;caption\u0026#34;: \u0026#34;Query Builder\u0026#34;, \u0026#34;width\u0026#34;: 600, \u0026#34;height\u0026#34;: 576, \u0026#34;formats\u0026#34;: { \u0026#34;thumbnail\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;thumbnail_query_builder.png\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;thumbnail_query_builder_7d88426f22\u0026#34;, \u0026#34;ext\u0026#34;: \u0026#34;.png\u0026#34;, \u0026#34;mime\u0026#34;: \u0026#34;image/png\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;width\u0026#34;: 163, \u0026#34;height\u0026#34;: 156, \u0026#34;size\u0026#34;: 12.1, \u0026#34;url\u0026#34;: \u0026#34;/uploads/thumbnail_query_builder_7d88426f22.png\u0026#34; }, \u0026#34;small\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;small_query_builder.png\u0026#34;, \u0026#34;hash\u0026#34;: \u0026#34;small_query_builder_7d88426f22\u0026#34;, \u0026#34;ext\u0026#34;: \u0026#34;.png\u0026#34;, \u0026#34;mime\u0026#34;: \u0026#34;image/png\u0026#34;, \u0026#34;path\u0026#34;: null, \u0026#34;width\u0026#34;: 500, \u0026#34;height\u0026#34;: 480, \u0026#34;size\u0026#34;: 67.21, \u0026#34;url\u0026#34;: \u0026#34;/uploads/small_query_builder_7d88426f22.png\u0026#34; } }, \u0026#34;hash\u0026#34;: \u0026#34;query_builder_7d88426f22\u0026#34;, \u0026#34;ext\u0026#34;: \u0026#34;.png\u0026#34;, \u0026#34;mime\u0026#34;: \u0026#34;image/png\u0026#34;, \u0026#34;size\u0026#34;: 13.03, \u0026#34;url\u0026#34;: \u0026#34;/uploads/query_builder_7d88426f22.png\u0026#34;, \u0026#34;previewUrl\u0026#34;: null, \u0026#34;provider\u0026#34;: \u0026#34;local\u0026#34;, \u0026#34;provider_metadata\u0026#34;: null, \u0026#34;createdAt\u0026#34;: \u0026#34;2024-01-28T07:56:48.469Z\u0026#34;, \u0026#34;updatedAt\u0026#34;: \u0026#34;2024-01-28T07:56:48.469Z\u0026#34; } API query and filtering One of the best thing about strapi is their filtering and query functionality, learnt a lot from there. They use the qs library to handle complex filtering use cases. See here . Also, they have a very impressive query builder . Probably I will use them in a future complex project.\nThere are more such features . We listed the ones which we have used.\nPain points Most of the bugs we faced is already present in their Github issues.\nOne of the most surprising bug is that client can update whatever and however they like, even API clients can update id (primary key) of the model. Related issue Type System Strapi uses Koa under the hood. To customize controllers , you have to work with a ctx (context) object. This wasn\u0026rsquo;t clear until you search through the docs properly. They have just mentioned some examples, I hope they just mention that the ctx is from koa in the Customizing Controllers page , then we could have customized as per our liking. Although this might be a nitpicking (or a skill issue from my side 🙃)\nAlso, VS Code doesn\u0026rsquo;t provide intellisense even if we use Typescript. You need to install @types/koa to get suggestions.\nPrimary Keys Anything which isn\u0026rsquo;t alphanumeric can\u0026rsquo;t be primary key (like slug or UUID can\u0026rsquo;t be primary keys). Related issue . This isn\u0026rsquo;t a big issue, we can circumvent this by creating custom controllers.\nJWT Refresh Tokens JWT tokens are implemented, but there is no refresh token feature as of now (another example of a feature from a forum / blog ). JWT access tokens are expired after 30 days.\nDead End We are trying to build a multi-vendor site. The default User model wasn\u0026rsquo;t enough. What a typical database schema design would do is just to inherit the User model. In SQL database terms it is just to declare a One-to-one field with the User model, thus maintaining a relation with the original User model.\nWhy not just add required fields to the original User model itself? No this isn\u0026rsquo;t a scalable schema design. Imagine updating the User table constantly if new fields need to be added for seller or customer. This isn\u0026rsquo;t ACID compliant.\nCan\u0026rsquo;t you just use an altogether different user-defined User model? No we can\u0026rsquo;t, strapi is closely tied to its default User model, so that it can provide different auth flows effectively. Simple solution is to just define a One-to-One relation with Seller and Customer.\n{ \u0026#34;kind\u0026#34;: \u0026#34;collectionType\u0026#34;, \u0026#34;collectionName\u0026#34;: \u0026#34;sellers\u0026#34;, ... \u0026#34;attributes\u0026#34;: { \u0026#34;description\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;text\u0026#34;, \u0026#34;required\u0026#34;: false }, \u0026#34;user\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;relation\u0026#34;, \u0026#34;relation\u0026#34;: \u0026#34;oneToOne\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;plugin::users-permissions.user\u0026#34; }, \u0026#34;books\u0026#34;: { \u0026#34;type\u0026#34;: \u0026#34;relation\u0026#34;, \u0026#34;relation\u0026#34;: \u0026#34;oneToMany\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;api::book.book\u0026#34;, \u0026#34;mappedBy\u0026#34;: \u0026#34;seller\u0026#34; }, ... } } Strapi has some permission settings through its permission plugin .\nWe allowed find and findOne permission for sellers. Only findOne for customers, as usual. We only applied findOne for User model (not find, because we don\u0026rsquo;t want clients to enumerate all of our users - obviously). Here comes the problems:\nSeller has User as a related field, now the related User won\u0026rsquo;t be populated in response, because find isn\u0026rsquo;t allowed on users. In fact we can\u0026rsquo;t directly fetch the related User from database (bypassing the permission system), due to permissions set earlier - strapi silently excludes the User related info.\nYou cannot just create a Seller instance with a relation to a User instance, again for permissions. You must fire another api request just to \u0026ldquo;link\u0026rdquo; the two models.\nClient (browser) could send related fields like User, and it would be updated silently, to fix that add custom code (this isn\u0026rsquo;t a bug - this is definitely expected, just our use case was different).\nasync update(ctx) { // ignore the userId passed from client // it is already set while creating // (client should not be able to set the userId) delete ctx.request.body.data.user; return await super.update(ctx); } Conclusion At last, I will thank all the contributors to the strapi project. It is a wonderful project (Star Here ) and I learnt a lot from their work.\nThey are doing a wonderful work. Open source is mostly a thankless job - where you have to manage a huge community, constant pull requests, feature requests, issues, rewrites and a lot more.\nHere I just shared my experience. We observed that this CMS might not be well suited for our project, but strapi has a lot of scope and use cases in various other projects.\nWe moved on to a different stack altogether (Django + HTMX), why we did that? What about its scalability? How we did that? Stay tuned 😃\nThanks a lot for reading. Stay safe, Have a nice day.\n","permalink":"https://dev-abir.github.io/blogs/my-experience-with-a-headless-cms-strapi/","summary":"🔗 dev.to link I was approached by my friend to develop a E-commerce site for his book publishing business. I was mainly responsible for the back-end part. Requirements were basic:\nA good looking frontend. Multivender (multiple book Publishers / Sellers). Admin panel. Usual E-commerce stuff: Orders, payments, refunds, shipping, invoice generation etc. Initially we started off with next.js in the frontend, with postgresql , Typeorm and express.js in backend. We knew from day 1 that it might take a huge time to develop, especially the admin panel, so we were looking for alternatives.","title":"My experience with a headless CMS (Strapi)"},{"content":"🔗 Github repo Rasoi A social media for recipes 🍳.\nLogo Source Note: all of the specifications given below are not finalized, may change if required.\nNote: running and setting up backend is complex, follow the README.md inside backend/ .\nFolder Structure backend: fastapi backend server, ml stuff and database seeding code. docs: documentations like diagrams, progress report etc. frontend: NextJs and Tailwind, Mobile app using React Native res: random generated resources from web like icons, fonts etc (to be used in app and web both). web: web only frontend code. Features Registration (Users can create accounts.They can log in to their account using emails and passwords). Recommended recipes (based on a recommendation engine / most popular rating wise/user profile\u0026rsquo;s engagement). Search for recipes through dish name / ingredients list / image of recipe. Show recipe image, ratings and similar / related recipes. Rating ,Comments. Posts (like Recipe images). Future Prospects We will try to detect the ingredient name from ingredient\u0026rsquo;s image, if possible. A mobile app, possibly in Flutter , React Native or even Kotlin (native android). Adding related video tutorials in recipe details page, expert authored posts and blogs. Reporting vulgar and offensive comments Scalable image search solutions. Better recommendation system. Technologies Backend We developed a REST API. Templating (like PHP pages or JSP) isn’t a good option if we are planning for a mobile app. Also, a REST API in the backend with an interactive UI in the frontend gives better UX. A python based backend (so that it will be easier to integrate ML features later). We are using FastAPI , it has lot of features, fast and super simple to implement. Uvicorn and nginx for production deployment. A postgresql database. It is a widely used Open Source RDBMS and it has features like support for JSON and Array data type storage and querying. We have also used the pgvector extension mainly for image search. Using arrays, we can provide recipe search through ingredients and recipe recommendations. ML / Dataset There are multiple datasets for recipes, with their own pros and cons: A good curated dataset, especially for Indian dishes but with no images. The one we are using, but need to scrape ratings, has no images 🙁. This is an ideal dataset.We hope to use this dataset in future. This is a small dataset about 13k recipes with images, which is within our hardware resources. We are currently using this dataset. We have used MobileNetV3 for efficient image feature extraction\nThis medium article might be helpful later, for extracting ingredients. Note : To make the DataSet we extract the ingredients part from Food.com and recipes from This Site. Some Indian recipes are also taken from Food.com and some Indian recipes are manually imported by our group members.\nFrontend / UI A social media website like instagram, X (twitter) is often used daily, for them a mobile app can be a better option. Our website will be used less frequently (similar to sites like StackOverflow), thus website is a better fit for frontend. Following the trend, we are using NextJs and Tailwind for styling. Both of them have massive advantages over traditional web frameworks, like SEO and Image Optimization, small bundle size, multiple rendering techniques etc. We are not using complex styles / components, because we have future plans to develop an app, possibly in React Native . React Native is a bit fragile, so the compromise. We have used many libraries to provide a good user experience. Like: react-tag-input, react-toastify, react-dropzone etc. This website helped us to decide theme colours and we are using the Itim font to match the context. Applications Cooking. Learning / Education. Social interaction. ","permalink":"https://dev-abir.github.io/projects/rasoi/","summary":"🔗 Github repo Rasoi A social media for recipes 🍳.\nLogo Source Note: all of the specifications given below are not finalized, may change if required.\nNote: running and setting up backend is complex, follow the README.md inside backend/ .\nFolder Structure backend: fastapi backend server, ml stuff and database seeding code. docs: documentations like diagrams, progress report etc. frontend: NextJs and Tailwind, Mobile app using React Native res: random generated resources from web like icons, fonts etc (to be used in app and web both).","title":"Rasoi"},{"content":"🔗 Github repo portfolio This is my portfolio site. I try to keep it as updated as possible.\nI used Hugo (cuz, I am too lazy) and this theme . Also, I don\u0026rsquo;t do frontend work primarily.\nThe projects and blogs are all auto-generated (see generate_projects.py and generate_blogs.py).\nThe public folder contains the resultant build files (static HTML and styles) after I invoke hugo. It is present at github.io repository. This repo is used by github to actually host the site. I set it as a submodule, to directly transfer the changes there, whenever I update the source code and generate a new build. Thus we can both host the site and show the source code from a single (almost) repo.\nNotes for future To run locally: hugo server or hugo server -D.\nTo build: hugo.\nThe themes folder contains modified PaperMod theme files (added Particles effect). It is just git-clonned, I should convert that to submodule in future.\nThe archetypes folder contains some default content for new posts. If we create new post using hugo CLI, then it will use those archetypes, obviously we can ovveride those content and the overriden content will be used to build the side.\nTo update this thing:\nClone the public folder (if not clonned properly) git submodule update --init --recursive Do changes in the source code, then (optionally delete all content, except the .git folder of public). Then invoke hugo to rebuild contents of public. Now at first, git add, commit and push the submodule. Then, you can do the same for the parent (root) folder. ","permalink":"https://dev-abir.github.io/projects/portfolio/","summary":"🔗 Github repo portfolio This is my portfolio site. I try to keep it as updated as possible.\nI used Hugo (cuz, I am too lazy) and this theme . Also, I don\u0026rsquo;t do frontend work primarily.\nThe projects and blogs are all auto-generated (see generate_projects.py and generate_blogs.py).\nThe public folder contains the resultant build files (static HTML and styles) after I invoke hugo. It is present at github.io repository. This repo is used by github to actually host the site.","title":"portfolio"},{"content":"🔗 Github repo chlorophyll A simple Plant disease detector APP, using image classification (Machine Learning) technique.\nOriginal paper URL: https://arxiv.org/abs/1511.08060 Dataset URL: https://data.mendeley.com/datasets/tywbtsjrjv/1 https://www.tensorflow.org/datasets/catalog/plant_village ","permalink":"https://dev-abir.github.io/projects/chlorophyll/","summary":"🔗 Github repo chlorophyll A simple Plant disease detector APP, using image classification (Machine Learning) technique.\nOriginal paper URL: https://arxiv.org/abs/1511.08060 Dataset URL: https://data.mendeley.com/datasets/tywbtsjrjv/1 https://www.tensorflow.org/datasets/catalog/plant_village ","title":"chlorophyll"},{"content":"🔗 Github repo sonic A super fast code judging system, which compiles and runs programs locally.\nNOTE: This app has been developed with the assumption that it will be used in a controlled lab environment, so security is not so tight.\nHow to run Follow the instructions given in sonic_server and sonic_client directories. You should start the server first, then the client. The client is to be deployed in every machines of the lab, the server needs to be placed in any one pc, and make sure of their connectivity. ","permalink":"https://dev-abir.github.io/projects/sonic/","summary":"🔗 Github repo sonic A super fast code judging system, which compiles and runs programs locally.\nNOTE: This app has been developed with the assumption that it will be used in a controlled lab environment, so security is not so tight.\nHow to run Follow the instructions given in sonic_server and sonic_client directories. You should start the server first, then the client. The client is to be deployed in every machines of the lab, the server needs to be placed in any one pc, and make sure of their connectivity.","title":"sonic"},{"content":"🔗 Github repo quiz A simple quiz app in React Native and TypeScript\nHow to run You must have nodejs , and yarn installed. Run \u0026ldquo;yarn\u0026rdquo; in project\u0026rsquo;s root folder, then run \u0026ldquo;yarn start\u0026rdquo;. Then, use the expo go app to run this React Native project. You may also open this app in a web browser. Just follow the instructions in the terminal. ","permalink":"https://dev-abir.github.io/projects/quiz/","summary":"🔗 Github repo quiz A simple quiz app in React Native and TypeScript\nHow to run You must have nodejs , and yarn installed. Run \u0026ldquo;yarn\u0026rdquo; in project\u0026rsquo;s root folder, then run \u0026ldquo;yarn start\u0026rdquo;. Then, use the expo go app to run this React Native project. You may also open this app in a web browser. Just follow the instructions in the terminal. ","title":"quiz"},{"content":"🔗 Github repo ChitChat A simple chat application, with chat rooms.\nLive demo Mainly used react for the frontend and django , and django channels for the backend.\nThanks to the open source libraries and websites like: framer-motion , tailwindcss , animista , djangochannelsrestframework (although I haven\u0026rsquo;t used this in the final app) etc\u0026hellip;\nTo install dependencies, use: pip install -r requirements.txt or just: pip install Django channels daphne python-decouple\nCreate a .env file and put a SECRET_KEY there, or decleare a SECRET_KEY environment variable.\nTo create a secret key: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'\nuse command daphne chitchat_server_project.asgi:application to start the server in production mode. Also make debug=False in production (use daphne -p $PORT ... if you are using a custom port environment variable).\n","permalink":"https://dev-abir.github.io/projects/chitchat/","summary":"🔗 Github repo ChitChat A simple chat application, with chat rooms.\nLive demo Mainly used react for the frontend and django , and django channels for the backend.\nThanks to the open source libraries and websites like: framer-motion , tailwindcss , animista , djangochannelsrestframework (although I haven\u0026rsquo;t used this in the final app) etc\u0026hellip;\nTo install dependencies, use: pip install -r requirements.txt or just: pip install Django channels daphne python-decouple","title":"ChitChat"},{"content":"🔗 Github repo Currency Exchange A simple react app, mainly to learn react, mui and css.\nThanks to this repo for the API.\nThis project was bootstrapped with Create React App .\nLive demo Steps to run In the project directory, you can run:\nyarn install To install the libraries used here.\nyarn start Runs the app in the development mode.\nOpen http://localhost:3000 to view it in your browser.\nThe page will reload when you make changes.\nYou may also see any lint errors in the console.\nyarn build Builds the app for production to the build folder.\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n","permalink":"https://dev-abir.github.io/projects/currency-exchange/","summary":"🔗 Github repo Currency Exchange A simple react app, mainly to learn react, mui and css.\nThanks to this repo for the API.\nThis project was bootstrapped with Create React App .\nLive demo Steps to run In the project directory, you can run:\nyarn install To install the libraries used here.\nyarn start Runs the app in the development mode.\nOpen http://localhost:3000 to view it in your browser.\nThe page will reload when you make changes.","title":"Currency Exchange"},{"content":"🔗 Github repo AI plays-python A simple flappy bird game, written in Python, where the player is AI.\nA flock of birds will try to survive in this game (rather environment), the best ones will continue, rest will die. Much like our evolution :)\nIt uses the concept of Evolutionary artificial neural networks (EANNs), or Evolving Neural Networks. I did this project mainly to get some idea of neural networks, machine learning in a somewhat interesting way. I used this article a lot, and also studied some free content whatever I could get on the internet :)\nWrote this a couple of months back, around May and uploading this on November. There are places, where this codebase and the simulation can be improved\u0026hellip;. Suggestions, bug-reports, bug-fixes are always welcome :)\nHow to play Assuming that you have python installed properly\u0026hellip;\nClone this repo or use the code button in github and download the zip (see this )\nCreate a virtual environment (recommended), so that there will be no conflicts between previously installed packages and the packages we will install now. At first cd into the downloaded repo, then issue the command: python3 -m pip venv\nDepending on the OS, the command to activate your virtual environment will be: .\\venv\\Scripts\\activate.ps1 (issue a PR if something is wrong here) or source venv\\bin\\activate (On closing the terminal the virtual environment will be gone, you should do step 3 again)\nTo install libraries used in this project, issue the command: pip install -r requirements.txt\nLast step: python main.py\nUse UP and DOWN arrow to increase the speed of the simulation and vice-versa.\nTo change settings, like resolution etc, edit the settings.py file.\n","permalink":"https://dev-abir.github.io/projects/aiplays-python/","summary":"🔗 Github repo AI plays-python A simple flappy bird game, written in Python, where the player is AI.\nA flock of birds will try to survive in this game (rather environment), the best ones will continue, rest will die. Much like our evolution :)\nIt uses the concept of Evolutionary artificial neural networks (EANNs), or Evolving Neural Networks. I did this project mainly to get some idea of neural networks, machine learning in a somewhat interesting way.","title":"AI plays-python"},{"content":"🔗 Github repo spaceapps-2021 Code repository for the NASA Space Apps challenge 2021\nspaceapps-2021 Code repository for the NASA Space Apps challenge 2021\nPASSCODE FOR AUTHENTICATION CODE IN LOGIN: beepb33p\nPROJECT ＬｕＣｏｎ A solution for the challenge “ Lunar Surface Operation : Real- time collaboration by team “Hello, Moon!” NASA Space App Challenge 2021 A real-time console log for communication and event logging between between mission control and astronauts for upcoming lunar missions like ARTEMIS program. Through this medium they will be able to log data regarding mission, situational awareness, voice comm, send multimedia, get approvals from flight director real-time and even filter and future prospects to edit client side messages with date and user by using control panel feature. We have met most of the potential consideration needed for this challenge. 50 years ago we didn\u0026rsquo;t had this technology but the world in Artemis program by 2024 will have it. It is very important for the citizen science.\nThis console, logs EVA\u0026rsquo;s communication using voice to text recognition which wasn\u0026rsquo;t present 50 years ago while the flight director and other positions will be able to log events after each transmissions. CAPCOM\u0026rsquo;s voice will also be converted into voice to text and be archived within the log, spacecraft telemetry, EVA Suit telemetry, can also be implemented within the project using APIs. We have also added public affair user authentication who will be able to view log and publish for scientific communities. - The design is very simple and sophisticated for mission purpose in real-time.\nLets start with the Front-end, we have used react(a JavaScript library) for a dynamic UX. For UI, we opted for a simplistic, terminal/console themed design. At first, we enter into the login page for authentication purpose, and then if authentication succeeds, react renders the Console component. In the Console component, user can enter new text/media logs. This new log is sent to the server, then it gets broadcasted to all the users in the network. Language used in front end are JavaScript, CSS, and HTML Then comes the Back-end, The backend uses NodeJS for programming. It authenticate users, receive, store and broadcast new logs. We have used libraries like express, CORS, ws(for WebSocket), HTTP etc. It has a HTTP server for authentication and all other communication is done using WebSocket. We have used the sqlite database, because of its simplicity.\nFUTURE FEATURES TO IMPLEMENT: 1. Log editing 2. Simultaneous creation of logs between drop down list of users ( custom logs ) 3. Implementation of instrumentation data using API into the console ( eg. live lander location/ suit telemetry/ hud.) Authors of this project Anargha Bose : Project HR, Project Presentation/Documentation, Team Management and Content Design Manish Das : Project Presentation/Documentation, Team Coordination, Code Tester Rupak Biswas : Frontend, UI/UX Design, Client Connection Adarsh Pandey : Frontend, UI/UX Design Saptarshi Dey : Initial Authentication, Database, Media Storage \u0026amp; Stream Abir Ganguly : Backend, Queries, Web Socket \u0026amp; HTTP Connection\n","permalink":"https://dev-abir.github.io/projects/spaceapps-2021/","summary":"🔗 Github repo spaceapps-2021 Code repository for the NASA Space Apps challenge 2021\nspaceapps-2021 Code repository for the NASA Space Apps challenge 2021\nPASSCODE FOR AUTHENTICATION CODE IN LOGIN: beepb33p\nPROJECT ＬｕＣｏｎ A solution for the challenge “ Lunar Surface Operation : Real- time collaboration by team “Hello, Moon!” NASA Space App Challenge 2021 A real-time console log for communication and event logging between between mission control and astronauts for upcoming lunar missions like ARTEMIS program.","title":"spaceapps-2021"},{"content":"🔗 Github repo snake A simple Snake game in C++, using the SFML library.\nHow to run: Grab the latest stable compiled binaries here (scroll down, and check the Assets)\nHow to compile: I generally use an ubuntu-based distro, I use this command to compile: g++ src/*.cpp -Wall -Wextra -Wpedantic -O3 -o build/game -I lib/SFML-2.5.1/include -L lib/SFML-2.5.1/lib -Wl,-rpath,./lib/SFML-2.5.1/lib -lsfml-graphics -lsfml-window -lsfml-system\nPlease place the SFML-2.x.x library under lib directory, I have added this directory specifically for putting libraries.\nPlease place the executable under build directory, I have added this directory specifically for putting compiled binaries.\nFor other os\u0026rsquo;s I would highly encourage you to follow the steps given here . Find the way to build for your OS/IDE/compiler under Getting started heading. They have explained most of the steps very well.\nThis whole process could be automated, using CMake. I may add in future.\nThanks in advance for contributing to my project \u0026#x263a;\u0026#xfe0f;\n","permalink":"https://dev-abir.github.io/projects/snake/","summary":"🔗 Github repo snake A simple Snake game in C++, using the SFML library.\nHow to run: Grab the latest stable compiled binaries here (scroll down, and check the Assets)\nHow to compile: I generally use an ubuntu-based distro, I use this command to compile: g++ src/*.cpp -Wall -Wextra -Wpedantic -O3 -o build/game -I lib/SFML-2.5.1/include -L lib/SFML-2.5.1/lib -Wl,-rpath,./lib/SFML-2.5.1/lib -lsfml-graphics -lsfml-window -lsfml-system\nPlease place the SFML-2.x.x library under lib directory, I have added this directory specifically for putting libraries.","title":"snake"},{"content":"🔗 Github repo gameOfLifeJS The Conway\u0026rsquo;s_Game_of_Life in Javascript. Live demo! ","permalink":"https://dev-abir.github.io/projects/gameoflifejs/","summary":"🔗 Github repo gameOfLifeJS The Conway\u0026rsquo;s_Game_of_Life in Javascript. Live demo! ","title":"gameOfLifeJS"},{"content":"🔗 Github repo tanks A simple tanks war game, written in GO .\nSource of the resources I used: tank image (from a github user) OLD tank image bullet imge explosion animation sprite sheet (I forgot from where I got the sound effects, although I remember I used this site to get the sound effects) The resources I used in this project are not original, I have edited some of them I used the go-sdl2 library here. The game: There will be a player tank(the green tank), and lots of enemy tanks(the red tanks). The enemy tanks will either try to shoot the player or else shoot at a random direction. The player will win, if it kills all the enemy tanks by shooting them. If any of the enemy tanks shoot and kills the player tank, the player loses. At first there will be a minumum number of enemy tanks, which will increase slowly\u0026hellip;\nHow to run: Grab the latest stable compiled binaries here (scroll down, and check the Assets)\nControls: Press w to move the player tank(the green tank) forward(or up). Press a to move the player tank(the green tank) left. Press s to move the player tank(the green tank) backward(or down). Press d to move the player tank(the green tank) right.\nPress LEFT ARROW to rotate the player tank(the green tank) anti-clockwise. Press LEFT ARROW to rotate the player tank(the green tank) clockwise.\nPress SPACE to shoot.\nHow to build: I would highly encourage you to understand each and every steps of the build process On GNU/Linux: Get(and install) the go compiler from golang.org.(I recommend you to use the compiler from golang.org, not the package manager\u0026rsquo;s one, and I have not tested the gccgo compile, there are thousands of tutorials available in the internet, for doing this) Ensure that you have these requirements. Get the zip of my project, extract it anywhere in your pc. Go to the directory where you have extracted it, and run go build -o tanks. To run the exectutable, run ./tanks. On Windows: Almost same as of GNU/Linux, excpet, for the last step, you should use .\\tanks, and for the first step, you have only one option, i.e., to get your compiler from golang.org.\nOn macOS: I don\u0026rsquo;t use it, BTW, you may contribute the steps\u0026hellip;.\nBuild release: If you want to build release binaries yourself, you may use the release_script.sh script to do that. I do the development in a Linux distro, so to run this script, you need to be on a Linux distro. I cross compile to get builds for other OS\u0026rsquo;s. Make sure you have met these dependencies. Run sh release_script.sh \u0026lt;VERSION STRING\u0026gt;(example: sh release_script.sh v2.0.3) in the root directory of my project, after completition of this command, you will see the release builds, inside the release directory. You may also read this to understand my release script. Thanks in advance for contributing to my project \u0026#x263a;\u0026#xfe0f;\n","permalink":"https://dev-abir.github.io/projects/tanks/","summary":"🔗 Github repo tanks A simple tanks war game, written in GO .\nSource of the resources I used: tank image (from a github user) OLD tank image bullet imge explosion animation sprite sheet (I forgot from where I got the sound effects, although I remember I used this site to get the sound effects) The resources I used in this project are not original, I have edited some of them I used the go-sdl2 library here.","title":"tanks"}]